// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/muratovdias/todo-list-tt/internal/models"
)

// MockToDo is a mock of ToDo interface.
type MockToDo struct {
	ctrl     *gomock.Controller
	recorder *MockToDoMockRecorder
}

// MockToDoMockRecorder is the mock recorder for MockToDo.
type MockToDoMockRecorder struct {
	mock *MockToDo
}

// NewMockToDo creates a new mock instance.
func NewMockToDo(ctrl *gomock.Controller) *MockToDo {
	mock := &MockToDo{ctrl: ctrl}
	mock.recorder = &MockToDoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToDo) EXPECT() *MockToDoMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockToDo) CreateTask(arg0 models.ToDo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockToDoMockRecorder) CreateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockToDo)(nil).CreateTask), arg0)
}

// DeleteTask mocks base method.
func (m *MockToDo) DeleteTask(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockToDoMockRecorder) DeleteTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockToDo)(nil).DeleteTask), arg0)
}

// MakeTaskDone mocks base method.
func (m *MockToDo) MakeTaskDone(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTaskDone", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeTaskDone indicates an expected call of MakeTaskDone.
func (mr *MockToDoMockRecorder) MakeTaskDone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTaskDone", reflect.TypeOf((*MockToDo)(nil).MakeTaskDone), arg0)
}

// TaskList mocks base method.
func (m *MockToDo) TaskList(arg0 string) ([]models.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskList", arg0)
	ret0, _ := ret[0].([]models.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskList indicates an expected call of TaskList.
func (mr *MockToDoMockRecorder) TaskList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskList", reflect.TypeOf((*MockToDo)(nil).TaskList), arg0)
}

// UpdateTask mocks base method.
func (m *MockToDo) UpdateTask(arg0 models.ToDo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockToDoMockRecorder) UpdateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockToDo)(nil).UpdateTask), arg0)
}
